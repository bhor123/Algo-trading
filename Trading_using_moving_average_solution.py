# -*- coding: utf-8 -*-
"""Copy of Finance 101 - Trading Using Moving Average - Solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/182GdATzcG8XqcpJPZnaY36Juo6_vGmAZ

#TASK #1: UNDERSTAND THE PROBLEM STATEMENT

#TASK #2: IMPORT DATASETS AND LIBRARIES:
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import plotly.express as px
from copy import copy
from scipy import stats
import matplotlib.pyplot as plt
import numpy as np
import plotly.figure_factory as ff
import plotly.graph_objects as go

# Read the stock data csv file
stocks_df = pd.read_csv('/content/drive/MyDrive/udemy - Python+Finance/udemy-FinanceAutomation/Part 2. Financial Analysis in Python/stock.csv')
stocks_df

# Sort the data based on Date
stocks_df = stocks_df.sort_values(by = ['Date'])
stocks_df

"""# TASK #3: PERFORM DATA VISUALIZATION & CREATE DAILY RETURNS"""

# Function to normalize the prices based on the initial price
def normalize(df):
  x = df.copy()
  for i in x.columns[1:]:
    x[i] = x[i]/x[i][0]
  return x

# Function to plot interative plot plot
def interactive_plot(df, title):
  fig = px.line(title= title)
  for i in df.columns[1:]:
    fig.add_scatter(x = df['Date'],y = df[i], name = i)
  fig.show()

# Plot interactive chart for original closing prices
interactive_plot(stocks_df, 'Prices')

# Plot interactive chart for normalized prices
interactive_plot(normalize(stocks_df), 'Normalized Stock Prices')

# Function to calculate the daily returns 
def daily_return(df):
  df_daily_return = df.copy()
  
  # Loop through each stock
  for i in df.columns[1:]:
    
    # Loop through each row belonging to the stock
    for j in range(1, len(df)):
      
      # Calculate the percentage of change from the previous day
      df_daily_return[i][j] = ((df[i][j]- df[i][j-1])/df[i][j-1]) * 100
    
    # set the value of first row to zero, as previous value is not available
    df_daily_return[i][0] = 0
  
  return df_daily_return

# Get the daily returns 
df_daily_return = daily_return(stocks_df)
df_daily_return

"""# TASK #4: CALCULATE AND VISUALIZE MOVING AVERAGE"""

# visualize the original stock price data, you can select which stocks you are interested in by changing the df.columns index 
# Try df.columns[1:2] or df.columns[1:3]
# Note that if you choose df.columns[1:], you will be able to plot all stocks
for i in stocks_df.columns[1:3]:
  fig = px.line(x = stocks_df.Date, y = stocks_df[i], title = i + ' price')
  fig.show()

# copy the original dataframe to a new dataframe
moving_average_df = copy(stocks_df)

# Create a moving average with 21 days window
# This is done by creating a loop through each stock & calculate the average using rolling(21)
# Note that the first 20 days shows NaN since we do not have data available
for i in stocks_df.columns[1:]:
  moving_average_df[i] = stocks_df[i].rolling(21).mean()

# View the first 30 elements
moving_average_df.head(30)

# Create a moving average plot
for i in stocks_df.columns[1:3]:
  fig = px.line(x = moving_average_df.Date[20:], y = moving_average_df[i][20:], title= i + ' 21-days moving average')
  fig.show()

# Overlay the 21-days moving average plot on top of stock original prices (without any averaging)
for i in stocks_df.columns[1:3]:  
  fig = px.line(x = stocks_df.Date[20:], y = stocks_df[i][20:], title =  i + ' Original Stock Price vs. 21-days Moving Average change')
  fig.add_scatter(x = moving_average_df.Date[20:], y = moving_average_df[i][20:], name = '21-days moving average')
  fig.show()

"""# TASK #5: GENERATE BUY/SELL SIGNALS USING MOVING AVERAGE"""

# Recall that our objective is to compare the original stock prices with the 21-days moving average data 
# Here's the first dataframe containing original stocks data
stocks_df

# Here's the second dataframe containing 21-days average data
moving_average_df

# create a signal dataframe 
# copy the dataframe
signals_df = copy(stocks_df)

stocks_df.columns[1:]

# logic to create buy (1) and sell (-1) signal
# if price is above the moving average, we buy since the trend is up
# if the price is below the moving average, we sell since the trend is down
# The moving average is a technical stock analysis tool that works by smoothing out price data or noise due to random short-term price fluctuations.
# As you increase the averaging window (look back window), the curve tend to become more smoother

# Loop on rows starting from row 21
for i in range(20, len(stocks_df)):

  # Loop on Columns (stock names)
  for j in stocks_df.columns[1:]:
    # Compare original stock data with the average 
    if  stocks_df[j][i] > moving_average_df[j][i]:
      signals_df[j][i] = 1

    elif  stocks_df[j][i] < moving_average_df[j][i]:
      signals_df[j][i] = -1
    
    else:
      signals_df[j][i] = 0

# Signal values (Buy/Sell decision table)
signals_df[20:]

"""# TASK #6: EXECUTE A TRADE USING MOVING AVERAGE"""

# Function to simulate a trade
# Note: We assume we started trading with $1M in assets
# Note: We don't want to spend more than 10% of the principal amount ($1M) on any specific stock so we restrict the buying amount to be 100,000.
# Note: We do not re-investing the profit to buy more stocks

def trade(signals_df):
  
  # create a dictionary to hold the number of stocks that we are buying
  buy = {}

  # list to store the profit/loss values over the trading time period
  profit_loss_change = []
  
  # list to store the dates in which profit/loss values were added to the list above
  date = []
  
  # Assign 0 to all stocks in the dictionary
  for i in stocks_df.columns[1:]:
    buy[i] = 0

  # Start with a principal amount of $1M
  amount = 1000000
  
  # placeholder to track profits & losses
  profit_loss_tracker = {'pl': 0}
  
  # loop through all rows in the dataframe 
  for i in range(len(stocks_df)-1):
    
    # for each index, we loop through the all available stocks to get the signal
    for j in stocks_df.columns[1:]:
      
      # BUY SIGNALS
      # if the signal is buy (1), we pass through this:
      if signals_df[j][i] == 1:
        
        # Since we don't want to spend more than 10% of the principal amount ($1M) on one specific stock,
        # we restrict the buying amount to be $100,000. 
        # Hence, we check if (1) we have funds over $99,999 and (2) don't own this specific stock at the moment (i.e.: buy[j] == 0)
        if amount > 99999 and buy[j] == 0:
          
          # Since signal is generated based on the closing stock price, we buy based on the next day price (df[j][i+1])
          # Let's calculate the number of stock units that we are buying
          # Number of stock units = Max funds(Balance)/next day price
          units = 100000/stocks_df[j][i+1]
          
          # Reduce the amount spent to buy the stock i.e.: $100,000 from the principal amount
          amount = amount - 100000

          # Add the number of units bought to the acquired stocks dictionary
          buy[j] = units

      # SELL SIGNALS  
      # Check the sell signal and also make sure we own the stock that we want to sell
      elif signals_df[j][i] == -1 and buy[j] > 0:
          
          # We sell the stock based on next day price and calculate the profit or loss
          change = (buy[j] * stocks_df[j][i+1]) - 100000
          
          # Change the number of units owned to 0 because we already sold them
          buy[j] = 0
          
          # We are not re-investing profit, we take out the profit and only add 100,000 to the
          # principal if we have profit, in case we incur loss we remove the loss from the principal
          amount = amount + min(100000, 100000 + change)
          
          # Add the profit/loss to the dictionary
          profit_loss_tracker['pl'] = profit_loss_tracker['pl'] + change
          
          # Append the p/l value to the list
          profit_loss_change.append(profit_loss_tracker['pl'])
          
          # Append the date to the list
          date.append(stocks_df['Date'][i])

  return profit_loss_change, date, buy

# Call the trading function and pass the signals dataframe as an argument
profit_loss_change, trade_date, buy = trade(signals_df)

trade_date

profit_loss_change

buy

# Plot the net Profit/Loss
fig = px.line(x = trade_date, y = profit_loss_change, title = 'p/l')
fig.show()

"""# TASK #5: TECHNICAL ANALYSIS WITH MOMENTUM"""

# Copy the dataframe
df_change  = copy(stocks_df)

# Loop through each stock
for i in stocks_df.columns[1:]:

  # Loop through each row belonging to the stock
  for j in range(1, len(stocks_df)):
    
    # Calculate the percentage of change from the previous day (note that we obtained the log change)
    df_change[i][j] = ((np.log(stocks_df[i][j])- np.log(stocks_df[i][j-1])))
  
  # set the value of first row to zero, as previous value is not available
  df_change[i][0] = 0

df_change

# Statistical information
df_change.describe()

# plot the returns based on consecutive days

for i in stocks_df.columns[1:]:
  fig1 = px.line(x = df_change.Date, y = df_change[i], title = i + ' change')
  fig1.show()

# Plot the original stock price, the 21-days moving average and the daily change 

for i in stocks_df.columns[1:]:
  # fig = make_subplots(rows=2, cols=1)
  fig = px.line(x = stocks_df.Date[20:], y = stocks_df[i][20:], title= i + ' average change')
  fig.add_scatter(x = moving_average_df.Date[20:], y = moving_average_df[i][20:], name='21 Day Moving Average')
  fig2 = px.line(x = df_change.Date[20:], y = df_change[i][20:], title= i + ' average change')
  fig.show() 
  fig2.show()

# Signal to buy and sell, if the return moving average changes from 0 to +ve and price is above the moving average we buy. 
# If the return moving average is moving from 0.5 to less than that and price is less than the moving average we sell
# also when return moving average changes from +ve to -ve we sell
for i in range(20, len(stocks_df)):
  for j in stocks_df.columns[1:]:
    
    if df_change[j][i] > 0 and df_change[j][i-1] < 0 and stocks_df[j][i] > moving_average_df[j][i]:
      signals_df[j][i] = 1
    
    elif df_change[j][i-1] > 0.05 and df_change[j][i] < 0.05 and stocks_df[j][i] < moving_average_df[j][i]:
      signals_df[j][i] = -1
    
    elif df_change[j][i-1] > 0 and df_change[j][i] < 0:
      signals_df[j][i] = -1
    
    else:
      signals_df[j][i] = 0

signals_df[20:]

# Do the trade using the new signal table
pl_change, id, buy = trade(signals_df)

pl_change

buy

fig = px.line(x = id, y = pl_change, title = 'p/l')
fig.show()

a = pd.DataFrame({'return': pl_change})
a = a['return'].diff()
sharpe_ratio = a.mean()/a.std() * np.sqrt(252)
portfolio_return = np.sum(a.mean()) * 252 / 1000000
print("Annual rate of return : {}%".format(portfolio_return))
print("Sharpe ratio for the model is {}".format(sharpe_ratio))

"""# GREAT JOB!"""